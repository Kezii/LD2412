use plotters::prelude::*;

const OUT_FILE_NAME: &str = "out.png";
fn main() -> Result<(), Box<dyn std::error::Error>> {
    let root = BitMapBackend::new(OUT_FILE_NAME, (1024, 768)).into_drawing_area();

    root.fill(&WHITE)?;

    let mut chart = ChartBuilder::on(&root)
        .caption("Chinese Radar", ("sans-serif", 80))
        .margin(5)
        .top_x_label_area_size(40)
        .y_label_area_size(40)
        .build_cartesian_2d(0i32..14i32, 0i32..117i32)?;

    chart
        .configure_mesh()
        .x_labels(15)
        .y_labels(15)
        .max_light_lines(4)
        .x_label_offset(35)
        .y_label_offset(25)
        .disable_x_mesh()
        .disable_y_mesh()
        .label_style(("sans-serif", 20))
        .draw()?;

    let matrix = [
        [0, 1, 100, 7, 1, 0, 0, 0, 0, 3, 1, 0, 1, 2],
        [0, 1, 56, 1, 0, 0, 0, 2, 0, 0, 0, 2, 1, 2],
        [0, 1, 16, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1],
        [0, 0, 20, 2, 0, 0, 1, 1, 0, 1, 0, 0, 0, 4],
        [0, 0, 71, 2, 0, 2, 6, 1, 0, 0, 0, 1, 2, 2],
        [0, 0, 87, 1, 0, 0, 1, 0, 2, 1, 1, 3, 1, 1],
        [0, 0, 50, 1, 4, 20, 18, 0, 0, 2, 1, 0, 2, 0],
        [0, 1, 94, 3, 100, 100, 100, 72, 3, 100, 25, 1, 1, 2],
        [0, 0, 100, 5, 100, 100, 100, 100, 11, 100, 100, 10, 2, 0],
        [0, 1, 2, 0, 14, 100, 71, 53, 3, 0, 4, 8, 2, 1],
        [0, 1, 18, 1, 17, 59, 83, 100, 9, 8, 1, 2, 4, 0],
        [0, 1, 20, 0, 5, 15, 100, 40, 30, 9, 4, 0, 0, 3],
        [0, 2, 24, 0, 0, 3, 22, 100, 60, 17, 2, 1, 0, 6],
        [0, 1, 27, 0, 0, 0, 3, 4, 1, 3, 2, 2, 6, 2],
        [0, 0, 10, 0, 0, 1, 22, 99, 17, 100, 21, 0, 1, 1],
        [0, 0, 20, 0, 0, 14, 85, 100, 55, 23, 3, 0, 2, 1],
        [0, 1, 24, 2, 0, 15, 85, 100, 36, 8, 0, 1, 1, 1],
        [0, 2, 8, 0, 0, 0, 7, 28, 34, 9, 0, 4, 0, 0],
        [0, 3, 8, 1, 0, 0, 1, 11, 15, 3, 0, 1, 1, 0],
        [0, 1, 44, 0, 0, 0, 1, 17, 10, 7, 12, 10, 1, 1],
        [0, 1, 12, 0, 0, 0, 0, 24, 92, 11, 1, 4, 2, 2],
        [0, 2, 38, 0, 0, 0, 1, 100, 100, 17, 1, 4, 8, 3],
        [0, 0, 100, 0, 0, 0, 0, 65, 100, 83, 7, 7, 10, 2],
        [0, 1, 34, 0, 0, 0, 0, 2, 52, 98, 38, 24, 10, 2],
        [0, 2, 35, 0, 0, 1, 1, 0, 7, 30, 7, 4, 1, 1],
        [0, 1, 76, 2, 1, 1, 2, 2, 1, 8, 12, 2, 0, 0],
        [0, 1, 26, 0, 0, 0, 0, 0, 1, 14, 14, 6, 7, 1],
        [0, 1, 11, 0, 0, 0, 0, 0, 3, 64, 100, 8, 9, 35],
        [0, 1, 35, 0, 0, 0, 0, 1, 0, 9, 17, 5, 4, 3],
        [0, 2, 52, 0, 0, 0, 0, 0, 2, 6, 13, 7, 2, 2],
        [0, 2, 22, 0, 0, 0, 0, 0, 3, 10, 41, 44, 7, 1],
        [0, 2, 44, 2, 0, 0, 0, 3, 2, 4, 6, 4, 3, 7],
        [0, 3, 60, 1, 0, 0, 0, 0, 0, 1, 4, 2, 0, 0],
        [0, 2, 50, 0, 0, 0, 0, 0, 0, 3, 54, 100, 24, 1],
        [0, 3, 36, 1, 0, 0, 0, 1, 0, 3, 14, 12, 1, 1],
        [0, 4, 23, 0, 0, 0, 0, 1, 1, 12, 18, 15, 6, 8],
        [0, 3, 39, 0, 0, 0, 1, 2, 4, 34, 34, 19, 1, 0],
        [0, 2, 45, 0, 0, 0, 0, 1, 100, 100, 100, 5, 1, 0],
        [0, 2, 34, 0, 0, 3, 1, 31, 100, 100, 100, 9, 0, 0],
        [0, 1, 27, 0, 0, 1, 0, 57, 100, 100, 100, 7, 2, 0],
        [0, 1, 44, 0, 0, 0, 0, 4, 14, 15, 3, 1, 1, 0],
        [0, 1, 58, 1, 0, 0, 15, 100, 82, 25, 3, 3, 0, 0],
        [0, 2, 35, 0, 0, 0, 23, 100, 32, 0, 0, 0, 1, 3],
        [0, 1, 50, 0, 0, 0, 5, 14, 7, 1, 0, 0, 0, 2],
        [0, 2, 29, 0, 4, 1, 16, 23, 4, 2, 0, 0, 0, 1],
        [0, 2, 24, 3, 0, 1, 11, 18, 5, 0, 0, 1, 0, 1],
        [0, 1, 44, 0, 4, 1, 2, 11, 4, 0, 1, 0, 1, 1],
        [0, 2, 86, 0, 0, 0, 2, 3, 1, 1, 1, 2, 0, 1],
        [0, 1, 100, 0, 1, 0, 1, 8, 19, 6, 0, 3, 2, 4],
        [0, 1, 38, 0, 0, 1, 0, 43, 25, 4, 1, 2, 2, 1],
        [0, 1, 5, 0, 0, 9, 34, 100, 8, 10, 5, 1, 4, 3],
        [0, 3, 2, 0, 3, 100, 100, 100, 6, 23, 21, 8, 19, 4],
        [0, 3, 2, 4, 4, 22, 16, 15, 3, 19, 32, 33, 8, 1],
        [0, 1, 11, 0, 0, 2, 2, 1, 1, 0, 1, 4, 0, 0],
        [0, 0, 3, 1, 18, 83, 44, 3, 4, 1, 5, 1, 0, 0],
        [0, 1, 5, 1, 59, 96, 10, 0, 0, 0, 1, 1, 0, 1],
        [0, 1, 29, 7, 100, 86, 3, 0, 0, 0, 0, 0, 1, 2],
        [0, 1, 2, 43, 65, 17, 0, 0, 0, 0, 0, 0, 0, 2],
        [0, 1, 22, 57, 53, 12, 0, 0, 0, 0, 0, 0, 0, 4],
        [0, 5, 24, 86, 61, 7, 0, 0, 0, 0, 0, 0, 1, 0],
        [0, 1, 10, 52, 29, 1, 0, 0, 0, 0, 0, 1, 4, 0],
        [0, 0, 100, 100, 17, 0, 0, 0, 0, 0, 0, 1, 3, 19],
        [0, 1, 100, 100, 100, 9, 1, 0, 3, 0, 0, 2, 2, 2],
        [0, 2, 24, 15, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 1, 100, 100, 60, 3, 0, 0, 2, 7, 0, 1, 2, 5],
        [0, 7, 100, 100, 100, 12, 6, 2, 5, 4, 0, 3, 2, 2],
        [0, 2, 54, 46, 9, 6, 0, 0, 1, 1, 1, 1, 1, 1],
        [0, 2, 5, 7, 3, 0, 0, 0, 0, 0, 1, 0, 1, 0],
        [0, 3, 23, 44, 12, 2, 0, 1, 0, 1, 2, 1, 2, 0],
        [0, 6, 31, 100, 100, 23, 1, 0, 0, 14, 1, 0, 0, 0],
        [0, 4, 41, 100, 100, 100, 15, 1, 0, 0, 0, 0, 0, 0],
        [0, 1, 0, 20, 100, 100, 100, 47, 10, 0, 0, 1, 0, 1],
        [0, 0, 1, 2, 56, 60, 30, 42, 8, 15, 14, 7, 0, 0],
        [0, 0, 3, 0, 4, 8, 4, 1, 0, 0, 0, 3, 2, 0],
        [0, 1, 0, 1, 6, 43, 13, 0, 0, 0, 0, 2, 2, 0],
        [0, 1, 8, 0, 2, 5, 1, 0, 0, 1, 1, 1, 1, 1],
        [0, 1, 10, 0, 0, 2, 0, 0, 3, 1, 2, 2, 5, 7],
        [0, 3, 6, 0, 0, 1, 0, 3, 6, 3, 2, 32, 16, 5],
        [0, 2, 10, 0, 0, 0, 0, 1, 2, 3, 10, 48, 8, 1],
        [0, 1, 18, 0, 1, 0, 0, 2, 2, 7, 20, 14, 3, 1],
        [0, 1, 51, 1, 0, 0, 0, 1, 4, 4, 5, 2, 1, 0],
        [0, 2, 18, 0, 0, 0, 5, 2, 1, 1, 3, 2, 2, 3],
        [0, 1, 29, 0, 0, 0, 4, 1, 0, 0, 1, 4, 7, 0],
        [0, 2, 100, 1, 0, 0, 0, 10, 0, 0, 0, 2, 5, 2],
        [0, 2, 34, 3, 0, 0, 1, 44, 21, 3, 5, 1, 1, 7],
        [0, 2, 57, 0, 0, 0, 1, 58, 31, 1, 1, 0, 0, 0],
        [0, 2, 100, 1, 0, 0, 0, 51, 58, 24, 14, 3, 2, 1],
        [0, 1, 100, 5, 0, 1, 0, 7, 10, 51, 19, 4, 5, 1],
        [0, 1, 100, 1, 0, 0, 0, 4, 20, 10, 7, 2, 4, 1],
        [0, 1, 85, 1, 0, 0, 0, 3, 62, 100, 100, 100, 18, 4],
        [0, 1, 100, 0, 0, 0, 0, 1, 1, 22, 41, 9, 1, 0],
        [0, 2, 88, 2, 1, 0, 0, 0, 0, 5, 43, 28, 5, 0],
        [0, 1, 61, 0, 0, 0, 0, 0, 1, 16, 27, 6, 2, 2],
        [0, 1, 81, 0, 0, 0, 0, 0, 2, 16, 6, 7, 2, 0],
        [0, 1, 46, 0, 0, 0, 0, 1, 0, 3, 15, 52, 14, 8],
        [0, 1, 48, 0, 0, 0, 0, 1, 0, 1, 3, 0, 0, 0],
        [0, 1, 54, 0, 1, 0, 0, 1, 0, 3, 4, 1, 3, 0],
        [0, 2, 30, 1, 1, 0, 1, 0, 0, 4, 2, 0, 4, 4],
        [0, 1, 16, 2, 3, 0, 0, 0, 0, 0, 8, 44, 16, 4],
        [0, 2, 21, 1, 0, 0, 0, 0, 0, 8, 7, 8, 1, 1],
        [0, 2, 42, 0, 0, 0, 0, 3, 5, 53, 99, 44, 1, 1],
        [0, 1, 50, 0, 0, 0, 0, 2, 10, 40, 42, 4, 1, 1],
        [0, 2, 21, 0, 0, 0, 0, 2, 20, 74, 59, 2, 1, 1],
        [0, 1, 5, 2, 0, 0, 1, 2, 14, 45, 30, 4, 0, 0],
        [0, 2, 11, 5, 2, 1, 0, 62, 100, 90, 22, 3, 5, 10],
        [0, 2, 8, 1, 2, 0, 1, 50, 100, 100, 46, 3, 6, 15],
        [0, 1, 7, 4, 0, 0, 10, 100, 62, 6, 4, 7, 1, 2],
        [0, 1, 98, 1, 1, 0, 11, 45, 20, 10, 0, 1, 1, 2],
        [0, 1, 49, 1, 4, 0, 10, 27, 7, 1, 1, 0, 0, 1],
        [0, 1, 11, 0, 1, 3, 24, 34, 3, 1, 0, 0, 0, 0],
        [0, 3, 12, 4, 0, 76, 100, 100, 100, 44, 8, 0, 1, 1],
        [0, 4, 11, 40, 11, 100, 100, 100, 100, 100, 100, 1, 1, 1],
        [0, 3, 86, 47, 50, 100, 100, 100, 61, 18, 20, 4, 2, 2],
        [0, 2, 25, 13, 84, 100, 100, 100, 38, 1, 4, 49, 34, 1],
        [0, 3, 4, 2, 63, 100, 100, 100, 12, 13, 8, 51, 31, 2],
        [0, 1, 22, 2, 6, 95, 87, 88, 2, 9, 3, 3, 0, 1],
        [0, 0, 77, 3, 90, 100, 46, 23, 100, 100, 60, 11, 4, 2],
    ];

    // for i in 0..15 {
    //     matrix[i][i] = i + 4;
    // }

    chart
        .draw_series(
            matrix
                .iter()
                .zip(0..)
                .flat_map(|(l, y)| l.iter().zip(0..).map(move |(v, x)| (x, y, v)))
                .map(|(x, y, v)| {
                    Rectangle::new(
                        [(x, y), (x + 1, y + 1)],
                        HSLColor(
                            240.0 / 360.0 - 240.0 / 360.0 * (*v as f64 / 20.0),
                            0.7,
                            0.1 + 0.4 * *v as f64 / 20.0,
                        )
                        .filled(),
                    )
                }),
        )?
        .label("test");

    // To avoid the IO failure being ignored silently, we manually call the present function
    root.present().expect("Unable to write result to file, please make sure 'plotters-doc-data' dir exists under current dir");
    println!("Result has been saved to {}", OUT_FILE_NAME);

    Ok(())
}
#[test]
fn entry_point() {
    main().unwrap()
}
